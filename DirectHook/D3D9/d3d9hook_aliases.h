#pragma once
#include <d3d9.h>

namespace directhook::d3d9
{
	using PFN_D3D9Device_QueryInterface = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, REFIID, void**);
	using PFN_D3D9Device_AddRef = ULONG(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_Release = ULONG(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_TestCooperativeLevel = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_GetAvailableTextureMem = ULONG(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_EvictManagedResources = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_GetDirect3D = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3D9**);
	using PFN_D3D9Device_GetDeviceCaps = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DCAPS9*);
	using PFN_D3D9Device_GetDisplayMode = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, D3DDISPLAYMODE*);
	using PFN_D3D9Device_GetCreationParameters = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DDEVICE_CREATION_PARAMETERS*);
	using PFN_D3D9Device_SetCursorProperties = void(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT, HCURSOR);
	using PFN_D3D9Device_SetCursorPosition = void(STDMETHODCALLTYPE*)(IDirect3DDevice9*, int, int, BOOL);
	using PFN_D3D9Device_ShowCursor = BOOL(STDMETHODCALLTYPE*)(IDirect3DDevice9*, BOOL);
	using PFN_D3D9Device_CreateAdditionalSwapChain = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DPRESENT_PARAMETERS*, IDirect3DSwapChain9**);
	using PFN_D3D9Device_GetSwapChain = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, IDirect3DSwapChain9**);
	using PFN_D3D9Device_GetNumberOfSwapChains = UINT(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_Reset = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DPRESENT_PARAMETERS*);
	using PFN_D3D9Device_Present = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, const RECT*, const RECT*, HWND, const RGNDATA*);
	using PFN_D3D9Device_GetBackBuffer = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT, D3DBACKBUFFER_TYPE, IDirect3DSurface9**);
	using PFN_D3D9Device_GetRasterStatus = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DRASTER_STATUS*);
	using PFN_D3D9Device_SetDialogBoxMode = BOOL(STDMETHODCALLTYPE*)(IDirect3DDevice9*, BOOL);
	using PFN_D3D9Device_SetGammaRamp = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, const D3DGAMMARAMP*);
	using PFN_D3D9Device_GetGammaRamp = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, D3DGAMMARAMP*);
	using PFN_D3D9Device_CreateTexture = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT, UINT, DWORD, D3DFORMAT, D3DPOOL, IDirect3DTexture9**, HANDLE*);
	using PFN_D3D9Device_CreateVolumeTexture = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT, UINT, UINT, DWORD, D3DFORMAT, D3DPOOL, IDirect3DVolumeTexture9**, HANDLE*);
	using PFN_D3D9Device_CreateCubeTexture = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT, DWORD, D3DFORMAT, D3DPOOL, IDirect3DCubeTexture9**, HANDLE*);
	using PFN_D3D9Device_CreateVertexBuffer = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, DWORD, DWORD, D3DPOOL, IDirect3DVertexBuffer9**, HANDLE*);
	using PFN_D3D9Device_CreateIndexBuffer = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, DWORD, D3DFORMAT, D3DPOOL, IDirect3DIndexBuffer9**, HANDLE*);
	using PFN_D3D9Device_CreateRenderTarget = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT, D3DFORMAT, D3DMULTISAMPLE_TYPE, BOOL, IDirect3DSurface9**, HANDLE*);
	using PFN_D3D9Device_CreateDepthStencilSurface = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT, D3DFORMAT, D3DMULTISAMPLE_TYPE, BOOL, IDirect3DSurface9**, HANDLE*);
	using PFN_D3D9Device_UpdateSurface = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DSurface9*, IDirect3DSurface9*, D3DRECT*);
	using PFN_D3D9Device_UpdateTexture = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DTexture9*, IDirect3DTexture9*);
	using PFN_D3D9Device_GetRenderTargetData = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DSurface9*, IDirect3DSurface9*);
	using PFN_D3D9Device_GetFrontBufferData = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, IDirect3DSurface9*);
	using PFN_D3D9Device_StretchRect = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DSurface9*, const RECT*, IDirect3DSurface9*, const RECT*, D3DTEXTUREFILTERTYPE);
	using PFN_D3D9Device_ColorFill = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DSurface9*, const RECT*, D3DCOLOR);
	using PFN_D3D9Device_CreateOffscreenPlainSurface = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT, D3DFORMAT, D3DPOOL, IDirect3DSurface9**, HANDLE*);
	using PFN_D3D9Device_SetRenderTarget = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, IDirect3DSurface9*);
	using PFN_D3D9Device_GetRenderTarget = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, IDirect3DSurface9**);
	using PFN_D3D9Device_SetDepthStencilSurface = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DSurface9*);
	using PFN_D3D9Device_GetDepthStencilSurface = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DSurface9**);
	using PFN_D3D9Device_BeginScene = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_EndScene = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_Clear = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, const D3DRECT*, DWORD, D3DCOLOR, float, DWORD);
	using PFN_D3D9Device_SetTransform = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DTRANSFORMSTATETYPE, const D3DMATRIX*);
	using PFN_D3D9Device_GetTransform = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DTRANSFORMSTATETYPE, D3DMATRIX*);
	using PFN_D3D9Device_MultiplyTransform = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DTRANSFORMSTATETYPE, const D3DMATRIX*);
	using PFN_D3D9Device_SetViewport = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, const D3DVIEWPORT9*);
	using PFN_D3D9Device_GetViewport = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DVIEWPORT9*);
	using PFN_D3D9Device_SetMaterial = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, const D3DMATERIAL9*);
	using PFN_D3D9Device_GetMaterial = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DMATERIAL9*);
	using PFN_D3D9Device_SetLight = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, const D3DLIGHT9*);
	using PFN_D3D9Device_GetLight = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, D3DLIGHT9*);
	using PFN_D3D9Device_LightEnable = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, BOOL);
	using PFN_D3D9Device_GetLightEnable = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, BOOL*);
	using PFN_D3D9Device_SetClipPlane = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, const float*);
	using PFN_D3D9Device_GetClipPlane = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, float*);
	using PFN_D3D9Device_SetRenderState = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DRENDERSTATETYPE, DWORD);
	using PFN_D3D9Device_GetRenderState = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DRENDERSTATETYPE, DWORD*);
	using PFN_D3D9Device_CreateStateBlock = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DSTATEBLOCKTYPE, IDirect3DStateBlock9**);
	using PFN_D3D9Device_BeginStateBlock = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_EndStateBlock = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DStateBlock9*);
	using PFN_D3D9Device_SetClipStatus = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, const D3DCLIPSTATUS9*);
	using PFN_D3D9Device_GetClipStatus = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DCLIPSTATUS9*);
	using PFN_D3D9Device_GetTexture = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, IDirect3DTexture9**);
	using PFN_D3D9Device_SetTexture = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, IDirect3DTexture9*);
	using PFN_D3D9Device_GetTextureStageState = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, D3DTEXTURESTAGESTATETYPE, DWORD*);
	using PFN_D3D9Device_SetTextureStageState = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, D3DTEXTURESTAGESTATETYPE, DWORD);
	using PFN_D3D9Device_GetSamplerState = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, D3DSAMPLERSTATETYPE, DWORD*);
	using PFN_D3D9Device_SetSamplerState = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD, D3DSAMPLERSTATETYPE, DWORD);
	using PFN_D3D9Device_ValidateDevice = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD*);
	using PFN_D3D9Device_SetPaletteEntries = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, const PALETTEENTRY*);
	using PFN_D3D9Device_GetPaletteEntries = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, PALETTEENTRY*);
	using PFN_D3D9Device_SetCurrentTexturePalette = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT);
	using PFN_D3D9Device_GetCurrentTexturePalette = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT*);
	using PFN_D3D9Device_SetScissorRect = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, const RECT*);
	using PFN_D3D9Device_GetScissorRect = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, RECT*);
	using PFN_D3D9Device_SetSoftwareVertexProcessing = void(STDMETHODCALLTYPE*)(IDirect3DDevice9*, BOOL);
	using PFN_D3D9Device_GetSoftwareVertexProcessing = BOOL(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_SetNPatchMode = void(STDMETHODCALLTYPE*)(IDirect3DDevice9*, float);
	using PFN_D3D9Device_GetNPatchMode = float(STDMETHODCALLTYPE*)(IDirect3DDevice9*);
	using PFN_D3D9Device_DrawPrimitive = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DPRIMITIVETYPE, UINT, UINT);
	using PFN_D3D9Device_DrawIndexedPrimitive = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DPRIMITIVETYPE, INT, UINT, UINT, UINT);
	using PFN_D3D9Device_DrawPrimitiveUP = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DPRIMITIVETYPE, UINT, const void*, UINT);
	using PFN_D3D9Device_DrawIndexedPrimitiveUP = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DPRIMITIVETYPE, UINT, const void*, UINT, UINT, const void*, UINT);
	using PFN_D3D9Device_ProcessVertices = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT, UINT, IDirect3DVertexBuffer9*, IDirect3DVertexBuffer9*, DWORD);
	using PFN_D3D9Device_CreateVertexDeclaration = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, const D3DVERTEXELEMENT9*, IDirect3DVertexDeclaration9**);
	using PFN_D3D9Device_SetVertexDeclaration = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DVertexDeclaration9*);
	using PFN_D3D9Device_GetVertexDeclaration = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DVertexDeclaration9**);
	using PFN_D3D9Device_SetFVF = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD);
	using PFN_D3D9Device_GetFVF = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD*);
	using PFN_D3D9Device_CreateVertexShader = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, const DWORD*, IDirect3DVertexShader9**);
	using PFN_D3D9Device_SetVertexShader = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DVertexShader9*);
	using PFN_D3D9Device_GetVertexShader = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DVertexShader9**);
	using PFN_D3D9Device_SetVertexShaderConstantF = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, const float*, UINT);
	using PFN_D3D9Device_GetVertexShaderConstantF = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, float*);
	using PFN_D3D9Device_SetVertexShaderConstantI = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, const int*, UINT);
	using PFN_D3D9Device_GetVertexShaderConstantI = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, int*);
	using PFN_D3D9Device_SetVertexShaderConstantB = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, const BOOL*, UINT);
	using PFN_D3D9Device_GetVertexShaderConstantB = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, BOOL*);
	using PFN_D3D9Device_SetStreamSource = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, IDirect3DVertexBuffer9*, UINT, UINT);
	using PFN_D3D9Device_GetStreamSource = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, IDirect3DVertexBuffer9**, UINT*, UINT*);
	using PFN_D3D9Device_SetStreamSourceFreq = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT);
	using PFN_D3D9Device_GetStreamSourceFreq = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, UINT*);
	using PFN_D3D9Device_SetIndices = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DIndexBuffer9*);
	using PFN_D3D9Device_GetIndices = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DIndexBuffer9**);
	using PFN_D3D9Device_CreatePixelShader = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, const DWORD*, IDirect3DPixelShader9**);
	using PFN_D3D9Device_SetPixelShader = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DPixelShader9*);
	using PFN_D3D9Device_GetPixelShader = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, IDirect3DPixelShader9**);
	using PFN_D3D9Device_SetPixelShaderConstantF = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, const float*, UINT);
	using PFN_D3D9Device_GetPixelShaderConstantF = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, float*);
	using PFN_D3D9Device_SetPixelShaderConstantI = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, const int*, UINT);
	using PFN_D3D9Device_GetPixelShaderConstantI = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, int*);
	using PFN_D3D9Device_SetPixelShaderConstantB = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, const BOOL*, UINT);
	using PFN_D3D9Device_GetPixelShaderConstantB = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, UINT, BOOL*);
	using PFN_D3D9Device_DrawRectPatch = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DRECTPATCH_INFO*, const D3DRECTPATCH_INFO*);
	using PFN_D3D9Device_DrawTriPatch = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DTRIPATCH_INFO*, const D3DTRIPATCH_INFO*);
	using PFN_D3D9Device_DeletePatch = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, DWORD);
	using PFN_D3D9Device_CreateQuery = HRESULT(STDMETHODCALLTYPE*)(IDirect3DDevice9*, D3DQUERYTYPE, IDirect3DQuery9**);
}